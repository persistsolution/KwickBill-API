name: Node.js CI with Bun, PM2, Docker, and OWASP Dependency Check

on:
  push:
    branches: [ "main" ]
  pull_request_target:
    branches: [ "main" ]

jobs:
  build:
    runs-on: self-hosted

    strategy:
      matrix:
        node-version: [22.12.0]

    steps:
    # Checkout the repository
    - name: Checkout Repository
      uses: actions/checkout@v4

    # Set up Node.js
    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    # Install Bun
    - name: Install Bun
      run: |
        curl -fsSL https://bun.sh/install | bash
        echo "$HOME/.bun/bin" >> $GITHUB_PATH
        bun --version

    # Install PM2
    - name: Install PM2 Globally
      run: |
        npm install -g pm2
        echo "$(npm bin -g)" >> $GITHUB_PATH
        pm2 --version

    # Install dependencies with Bun
    - name: Install Dependencies
      run: bun install

    # OWASP Dependency Check
    - name: OWASP Dependency Check
      uses: dependency-check/github-action@v4.4.1
      with:
        # Path to the directory or file to scan
        scan: .
        # Format of the report: HTML, JSON, XML, etc.
        format: "HTML,JSON"
        # Optional output directory for the reports
        out: "./owasp-report"
        # Fail the build on vulnerabilities of a specific severity
        fail_on_severity: "medium"

    # Build the source code
    - name: Build the Source Code
      run: |
        bun build index.ts --if-present

    # Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Build and Push Docker Image
    - name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/my-app:latest

    # Deploy the Docker container
    - name: Deploy Docker Container
      run: |
        docker pull ${{ secrets.DOCKER_USERNAME }}/my-app:latest
        docker stop my-app || true
        docker rm my-app || true
        docker run -d --name my-app -p 3001:3000 ${{ secrets.DOCKER_USERNAME }}/my-app:latest
